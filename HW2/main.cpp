// Name: Maroof Mohammed Farooq// HW P2// Image Processing#include <stdio.h>#include <iostream>#include <stdlib.h>#include <vector>#include <fstream>#include <iterator>#include <math.h>#include <map>#include "imageData.h"#include "imageAlgorithms.h"#include "matrix.h"using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	int BytesPerPixel;	int imageWidth;	int imageHeight;	int problemNumber;//----------------------------------------------------------------------------------------------------------------//	// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [imageWidth = 256] [imageHeight = 256]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1;// default is grey image		imageHeight = 256;		imageWidth = 256;	}	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5){			imageWidth = atoi(argv[4]);			imageHeight = atoi(argv[5]);		}		else{			imageHeight = 256;			imageWidth = 256;		}	}	problemNumber = atoi(argv[6]);//----------------------------------------------------------------------------------------------------------------//// input and output file names	string inputFileName = argv[1];	string outputFileName = argv[2];//----------------------------------------------------------------------------------------------------------------//// Geometric image modification	if(problemNumber ==1){		// Read Image		imageData originalImage(BytesPerPixel,imageWidth,imageHeight);		originalImage.imageRead(inputFileName.c_str());		vector<imageData> colorChannels = originalImage.seperateChannels();//		vector<double> cart = originalImage.cartesianToImage(0.5,0.5);		cout << (int)(colorChannels[2]).getPixelValuesFrom_xy(143.5,244.5) <<endl;//		matrix<int,int> a(3,3,1);//		a.setMatrixByValues(9,1,2,3,4,5,4,2,3,3);//		matrix<int,int> b;//		b = a.pseudoInverse();//		cout<< a.determinant(a) <<endl;//		b.printMatrix();//		cout << a.determinant(a) <<endl;	}//----------------------------------------------------------------------------------------------------------------//// Digital Halftoning	if(problemNumber == 2) {//		// Read image//		imageData originalImage(BytesPerPixel,imageWidth,imageHeight);//		originalImage.imageRead(inputFileName.c_str());////// 		Dither the image using 2x2 bayer index matrix//		imageData ditheredImage = originalImage;//		imageAlgorithms ditheringAlgo(&ditheredImage);//		ditheringAlgo.dithering(2,true);//		ditheredImage.saveImage(("p2_a_output/"+outputFileName+"_2x2"+".raw").c_str());////		// Dither the image using 8x8 bayer index matrix//		ditheredImage = originalImage;//		ditheringAlgo.dithering(8,false);//		ditheredImage.saveImage(("p2_a_output/"+outputFileName+"_8x8"+".raw").c_str());////		// Dither the image using given bayer index matrix//		ditheredImage = originalImage;//		ditheringAlgo.dithering(4,true);//		ditheredImage.saveImage(("p2_a_output/"+outputFileName+"_a4"+".raw").c_str());////		// Dithering for four intensity levels//		ditheredImage = originalImage;//		ditheringAlgo.fourLevelDithering();//		ditheredImage.saveImage(("p2_a_output/"+outputFileName+"_4Level"+".raw").c_str());//////		 Halftoning using error diffusion (floyd-steinberg)//		ditheredImage = originalImage;//		ditheringAlgo.errorDiffusion("floyd-steinberg");//		ditheredImage.saveImage(("p2_b_output/"+outputFileName+"_floyd-steinberg"+".raw").c_str());//////		Halftoning using error diffusion (JJN)//		ditheredImage = originalImage;//		ditheringAlgo.errorDiffusion("JJN");//		ditheredImage.saveImage(("p2_b_output/"+outputFileName+"_jjn"+".raw").c_str());////		//	 Halftoning using error diffusion (stucki)//		ditheredImage = originalImage;//		ditheringAlgo.errorDiffusion("stucki");//		ditheredImage.saveImage(("p2_b_output/"+outputFileName+"_stucki"+".raw").c_str());	}	return 0;}