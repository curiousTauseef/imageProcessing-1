// Name: Maroof Mohammed Farooq// HW P2// Image Processing#include <stdio.h>#include <iostream>#include <stdlib.h>#include <vector>#include <fstream>#include <iterator>#include <math.h>#include <map>#include "imageData.h"#include "imageAlgorithms.h"#include "matrix.h"using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	int BytesPerPixel;	int imageWidth;	int imageHeight;	int problemNumber;//----------------------------------------------------------------------------------------------------------------//	// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [imageWidth = 256] [imageHeight = 256]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1;// default is grey image		imageHeight = 256;		imageWidth = 256;	}	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5){			imageWidth = atoi(argv[4]);			imageHeight = atoi(argv[5]);		}		else{			imageHeight = 256;			imageWidth = 256;		}	}	problemNumber = atoi(argv[6]);//----------------------------------------------------------------------------------------------------------------//// input and output file names	string inputFileName = argv[1];	string outputFileName = argv[2];////----------------------------------------------------------------------------------------------------------------//	// Digital Halftoning	if(problemNumber == 2) {//		matrix<int,double> test(2,2,1);////		test.setMatrixValues(2.1,1,1,0);//		test.setMatrixByValues(4,5.3,3.5,6.6,10.3);//		test.multiplyEachValueBy(3.4);//		test.printMatrix();//		cout<< test.getMatrixValues(1,1,0) << endl;		// Read image		imageData originalImage(BytesPerPixel,imageWidth,imageHeight);		originalImage.imageRead(inputFileName.c_str());		// Dither the image using 2x2 bayer index matrix		imageData ditheredImage = originalImage;		imageAlgorithms ditheringAlgo(&ditheredImage);		ditheringAlgo.dithering(2,true);		ditheredImage.saveImage(("p2_a_output/"+outputFileName+"_2x2"+".raw").c_str());		// Dither the image using 8x8 bayer index matrix		ditheredImage = originalImage;		ditheringAlgo.dithering(8,false);		ditheredImage.saveImage(("p2_a_output/"+outputFileName+"_8x8"+".raw").c_str());		// Dither the image using given bayer index matrix		ditheredImage = originalImage;		ditheringAlgo.dithering(4,true);		ditheredImage.saveImage(("p2_a_output/"+outputFileName+"_a4"+".raw").c_str());		// Dithering for four intensity levels		ditheredImage = originalImage;		ditheringAlgo.fourLevelDithering();		ditheredImage.saveImage(("p2_a_output/"+outputFileName+"_4Level"+".raw").c_str());		// Halftoning using error diffusion		ditheredImage = originalImage;	}	return 0;}