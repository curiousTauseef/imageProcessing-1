// This sample code reads in image data from a RAW image file and // writes it into another file// NOTE:	The code assumes that the image is of size 256 x 256 and is in the//			RAW format. You will need to make corresponding changes to//			accommodate images of different sizes and/or types#include <stdio.h>#include <iostream>#include <stdlib.h>#include <vector>#include "imageData.h"using namespace std;//unsigned char* cropImage(unsigned char* Imagearray,int BytesPerPixel,int cropRow, int cropColumn, int cropWidth, int cropHeight){//	unsigned char newImage[cropHeight][cropWidth][BytesPerPixel];//	for(int indexChannel = 0; indexChannel < BytesPerPixel;indexChannel++){//		for(int indexColumn=0;indexColumn < cropWidth;indexColumn++){//			for(int indexRow=0;indexRow < cropHeight;indexRow++){//				newImage[indexRow][indexColumn][indexChannel] = Imagearray[cropRow+indexRow][cropColumn+indexColumn][indexChannel];//			}//		}//	}//	return(&newImage[0][0][0]);//}int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file1;	FILE *file2;	int BytesPerPixel;	int imageWidth;	int imageHeight;		// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [imageWidth = 256] [imageHeight = 256]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4) {		BytesPerPixel = 1;// default is grey image		imageHeight = 256;		imageWidth = 256;	}	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5){			imageWidth = atoi(argv[4]);			imageHeight = atoi(argv[5]);		}		else{			imageHeight = 256;			imageWidth = 256;		}	}		// Allocate image data array//	unsigned char Imagedata[imageHeight][imageWidth][BytesPerPixel];//	vector<vector<vector<unsigned char> > > Imagedata(imageHeight, vector<vector<unsigned char> >(imageWidth, vector<unsigned char>(BytesPerPixel,0)));	vector<unsigned char> Imagedata(imageHeight*imageWidth*BytesPerPixel,0);////	// Read image (filename specified by first argument) into image data matrix	if (!(file1=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}//	fread(&Imagedata[0], sizeof(unsigned char), imageWidth*imageHeight*BytesPerPixel, file1);//	fclose(file1);////	cout << (int)Imagedata[0]<<endl;//	//	Cropping Image//	unsigned int cropRow = 24;//	unsigned int cropColumn = 34;//	unsigned int cropWidth = 183;//	unsigned int cropHeight = 193;//	unsigned char* newImage;////	newImage = cropImage(&Imagedata[0][0][0],BytesPerPixel,cropRow, cropColumn, cropWidth, cropHeight);//////	for(int indexChannel = 0; indexChannel < BytesPerPixel;indexChannel++){////		for(int indexColumn=0;indexColumn < cropWidth;indexColumn++){////			for(int indexRow=0;indexRow < cropHeight;indexRow++){////				newImage[indexRow][indexColumn][indexChannel] = Imagedata[cropRow+indexRow][cropColumn+indexColumn][indexChannel];////			}////		}////	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file2=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	imageData testImage(file1,BytesPerPixel,imageWidth, imageHeight);	testImage.imageRead();	testImage.saveData(file2);////	fwrite(newImage, sizeof(unsigned char), cropWidth*cropHeight*BytesPerPixel, file);//	fwrite(&Imagedata[0], sizeof(unsigned char), imageWidth*imageHeight*BytesPerPixel, file);//	fclose(file);	return 0;}